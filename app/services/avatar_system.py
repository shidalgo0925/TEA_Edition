# -*- coding: utf-8 -*-
"""
Sistema de Avatar IA GuÃ­a - TEA Edition
Maneja las interacciones del avatar virtual con el niÃ±o
"""

from datetime import datetime
from app.extensions import db
from app.models.tea_models import PerfilNino
from app.services.user_progress import UserProgressSystem

class AvatarSystem:
    """Sistema de Avatar IA para guiar al niÃ±o"""
    
    # Frases contextuales del avatar
    FRASES_CONTEXTUALES = {
        'saludo': [
            "Â¡Hola! Soy tu maestra virtual. Â¿CÃ³mo estÃ¡s hoy?",
            "Â¡Buenos dÃ­as! Â¿Listo para aprender algo nuevo?",
            "Â¡Hola! Me da mucho gusto verte de nuevo.",
            "Â¡Hola! Â¿QuÃ© tal si aprendemos juntos hoy?"
        ],
        'motivacion': [
            "Â¡Eres muy inteligente! Sigue asÃ­.",
            "Â¡Excelente trabajo! Estoy muy orgullosa de ti.",
            "Â¡QuÃ© bien lo estÃ¡s haciendo! ContinÃºa asÃ­.",
            "Â¡Eres un campeÃ³n! No te rindas nunca."
        ],
        'progreso': [
            "Â¡Mira cuÃ¡nto has progresado! Â¡Eres increÃ­ble!",
            "Â¡Wow! Has completado muchas actividades. Â¡Sigue asÃ­!",
            "Â¡EstÃ¡s mejorando cada dÃ­a! Me encanta ver tu progreso.",
            "Â¡QuÃ© orgullosa estoy de ti! Has aprendido mucho."
        ],
        'categoria_lenguaje': [
            "Â¡Vamos a practicar palabras! Â¿Te gusta hablar?",
            "Hoy vamos a aprender nuevas palabras. Â¿Listo?",
            "Â¡Las palabras son mÃ¡gicas! Vamos a descubrirlas juntas.",
            "Â¿SabÃ­as que cada palabra tiene su sonido especial?"
        ],
        'categoria_numeros': [
            "Â¡Los nÃºmeros son muy divertidos! Â¿Quieres contar conmigo?",
            "Â¡Vamos a jugar con nÃºmeros! Â¿Te gusta contar?",
            "Los nÃºmeros nos ayudan a entender el mundo. Â¡Aprendamos juntos!",
            "Â¡Contar es como un juego! Â¿Empezamos?"
        ],
        'categoria_colores': [
            "Â¡Los colores son hermosos! Â¿CuÃ¡l es tu favorito?",
            "Â¡Vamos a pintar el mundo de colores! Â¿Te gusta?",
            "Cada color tiene su magia especial. Â¡DescubrÃ¡mosla!",
            "Â¡Los colores nos hacen felices! Â¿Jugamos con ellos?"
        ],
        'categoria_animales': [
            "Â¡Los animales son nuestros amigos! Â¿Quieres conocerlos?",
            "Â¡Vamos a visitar el zoolÃ³gico virtual! Â¿Te gusta?",
            "Cada animal tiene su sonido especial. Â¡Escuchemos!",
            "Â¡Los animales son muy divertidos! Â¿Jugamos con ellos?"
        ],
        'descanso': [
            "Es importante descansar. Â¿Te sientes cansado?",
            "Tomemos un descanso. Â¿Quieres relajarte un poco?",
            "A veces necesitamos parar y respirar. Â¿Te ayudo?",
            "Â¡Descansar tambiÃ©n es parte de aprender! Â¿QuÃ© te parece?"
        ],
        'felicitacion': [
            "Â¡Bravo! Â¡Lo hiciste perfectamente!",
            "Â¡Eres increÃ­ble! Â¡QuÃ© bien lo hiciste!",
            "Â¡Wow! Â¡Eres muy inteligente!",
            "Â¡Excelente! Â¡Estoy muy orgullosa de ti!"
        ],
        'animacion': [
            "Â¡Vamos a hacer una actividad divertida!",
            "Â¡Esto va a ser muy emocionante!",
            "Â¡PrepÃ¡rate para algo genial!",
            "Â¡Vamos a jugar y aprender al mismo tiempo!"
        ]
    }
    
    # Frases segÃºn el nivel de progreso
    FRASES_PROGRESO = {
        'inicial': [
            "Â¡Todo comienza con el primer paso! Â¡Vamos!",
            "Â¡Cada experto fue alguna vez un principiante!",
            "Â¡El aprendizaje es una aventura! Â¿Empezamos?",
            "Â¡Tu viaje de aprendizaje comienza ahora!"
        ],
        'basico': [
            "Â¡Ya estÃ¡s aprendiendo! Â¡Sigue asÃ­!",
            "Â¡Vas por buen camino! Â¡ContinÃºa!",
            "Â¡EstÃ¡s mejorando! Â¡No te detengas!",
            "Â¡Cada dÃ­a aprendes mÃ¡s! Â¡Eres genial!"
        ],
        'intermedio': [
            "Â¡EstÃ¡s avanzando muy bien! Â¡Eres inteligente!",
            "Â¡QuÃ© rÃ¡pido aprendes! Â¡Me impresionas!",
            "Â¡Ya eres un experto en muchas cosas!",
            "Â¡Tu progreso es increÃ­ble! Â¡Sigue asÃ­!"
        ],
        'avanzado': [
            "Â¡Eres un verdadero maestro! Â¡QuÃ© orgullosa estoy!",
            "Â¡Tu conocimiento es impresionante!",
            "Â¡Eres un ejemplo para otros niÃ±os!",
            "Â¡Tu dedicaciÃ³n es admirable! Â¡Eres increÃ­ble!"
        ],
        'experto': [
            "Â¡Eres un genio! Â¡Tu conocimiento es asombroso!",
            "Â¡Eres un verdadero experto! Â¡QuÃ© talento!",
            "Â¡Tu nivel de aprendizaje es extraordinario!",
            "Â¡Eres una inspiraciÃ³n! Â¡QuÃ© orgullosa estoy de ti!"
        ]
    }
    
    @classmethod
    def obtener_frase_contextual(cls, contexto, nino_id=None):
        """Obtiene una frase contextual del avatar"""
        import random
        
        frases = cls.FRASES_CONTEXTUALES.get(contexto, ["Â¡Hola! Â¿CÃ³mo estÃ¡s?"])
        
        # Si tenemos informaciÃ³n del niÃ±o, personalizar la frase
        if nino_id:
            try:
                nino = PerfilNino.query.get(nino_id)
                if nino:
                    # Agregar el nombre del niÃ±o a algunas frases
                    if contexto == 'saludo':
                        frases = [f"Â¡Hola {nino.nombre}! Â¿CÃ³mo estÃ¡s hoy?"] + frases
                    elif contexto == 'motivacion':
                        frases = [f"Â¡{nino.nombre}, eres muy inteligente!"] + frases
            except:
                pass
        
        return random.choice(frases)
    
    @classmethod
    def obtener_frase_progreso(cls, nino_id):
        """Obtiene una frase basada en el progreso del niÃ±o"""
        try:
            estadisticas = UserProgressSystem.obtener_estadisticas_dashboard(nino_id)
            nivel = estadisticas.get('nivel_general', 'inicial')
            
            frases = cls.FRASES_PROGRESO.get(nivel, cls.FRASES_PROGRESO['inicial'])
            import random
            return random.choice(frases)
        except:
            return "Â¡Vamos a aprender juntos!"
    
    @classmethod
    def obtener_recomendacion_actividad(cls, nino_id):
        """Obtiene una recomendaciÃ³n de actividad basada en el progreso"""
        try:
            estadisticas = UserProgressSystem.obtener_estadisticas_dashboard(nino_id)
            progreso_categorias = estadisticas.get('progreso_por_categoria', {})
            
            # Encontrar la categorÃ­a con menor progreso
            categoria_recomendada = None
            menor_progreso = 100
            
            for categoria, progreso in progreso_categorias.items():
                porcentaje = progreso.get('porcentaje_completado', 0)
                if porcentaje < menor_progreso:
                    menor_progreso = porcentaje
                    categoria_recomendada = categoria
            
            if categoria_recomendada:
                frases = cls.FRASES_CONTEXTUALES.get(f'categoria_{categoria_recomendada}', 
                                                   ["Â¡Vamos a aprender algo nuevo!"])
                import random
                return {
                    'frase': random.choice(frases),
                    'categoria': categoria_recomendada,
                    'porcentaje': menor_progreso
                }
            
            return {
                'frase': "Â¡Vamos a aprender algo nuevo!",
                'categoria': 'lenguaje',
                'porcentaje': 0
            }
        except:
            return {
                'frase': "Â¡Vamos a aprender algo nuevo!",
                'categoria': 'lenguaje',
                'porcentaje': 0
            }
    
    @classmethod
    def generar_mensaje_diario(cls, nino_id):
        """Genera un mensaje diario personalizado para el niÃ±o"""
        try:
            nino = PerfilNino.query.get(nino_id)
            estadisticas = UserProgressSystem.obtener_estadisticas_dashboard(nino_id)
            
            # Mensaje basado en el progreso
            nivel = estadisticas.get('nivel_general', 'inicial')
            dias_consecutivos = estadisticas.get('dias_consecutivos', 0)
            actividades_completadas = estadisticas.get('actividades_completadas', 0)
            
            mensaje = f"Â¡Hola {nino.nombre}! "
            
            if dias_consecutivos > 0:
                mensaje += f"Â¡QuÃ© bien que hayas venido {dias_consecutivos} dÃ­as seguidos! "
            
            if actividades_completadas > 0:
                mensaje += f"Ya has completado {actividades_completadas} actividades. "
            
            # Agregar frase de progreso
            mensaje += cls.obtener_frase_progreso(nino_id)
            
            return mensaje
        except:
            return "Â¡Hola! Â¿Listo para aprender algo nuevo hoy?"
    
    @classmethod
    def obtener_estado_emocional(cls, nino_id):
        """Determina el estado emocional del avatar basado en el progreso del niÃ±o"""
        try:
            estadisticas = UserProgressSystem.obtener_estadisticas_dashboard(nino_id)
            nivel = estadisticas.get('nivel_general', 'inicial')
            dias_consecutivos = estadisticas.get('dias_consecutivos', 0)
            
            if nivel in ['avanzado', 'experto'] and dias_consecutivos >= 3:
                return 'muy_feliz'
            elif nivel in ['intermedio', 'avanzado']:
                return 'feliz'
            elif nivel == 'basico':
                return 'animado'
            else:
                return 'motivador'
        except:
            return 'motivador'
    
    @classmethod
    def generar_animacion_avatar(cls, estado_emocional):
        """Genera la animaciÃ³n del avatar segÃºn su estado emocional"""
        animaciones = {
            'muy_feliz': {
                'emoji': 'ðŸŽ‰',
                'color': '#FFD700',
                'animacion': 'bounce'
            },
            'feliz': {
                'emoji': 'ðŸ˜Š',
                'color': '#2ECC71',
                'animacion': 'pulse'
            },
            'animado': {
                'emoji': 'ðŸŒŸ',
                'color': '#3498DB',
                'animacion': 'wiggle'
            },
            'motivador': {
                'emoji': 'ðŸ’ª',
                'color': '#E74C3C',
                'animacion': 'glow'
            }
        }
        
        return animaciones.get(estado_emocional, animaciones['motivador'])

# Funciones de utilidad para las rutas
def obtener_frase_avatar(contexto, nino_id=None):
    """Obtiene una frase del avatar para un contexto especÃ­fico"""
    return AvatarSystem.obtener_frase_contextual(contexto, nino_id)

def obtener_mensaje_diario(nino_id):
    """Obtiene el mensaje diario personalizado del avatar"""
    return AvatarSystem.generar_mensaje_diario(nino_id)

def obtener_recomendacion_actividad(nino_id):
    """Obtiene una recomendaciÃ³n de actividad del avatar"""
    return AvatarSystem.obtener_recomendacion_actividad(nino_id)




